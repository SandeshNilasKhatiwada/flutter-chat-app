// Mocks generated by Mockito 5.4.5 from annotations
// in chatapp/test/features/auth/domain/usecase/register_user_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:chatapp/features/auth/domain/entities/login.dart' as _i7;
import 'package:chatapp/features/auth/domain/entities/user.dart' as _i5;
import 'package:chatapp/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<String, String>> registerUser(_i5.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [user],
        ),
        returnValue: _i3.Future<_i4.Either<String, String>>.value(
            _i6.dummyValue<_i4.Either<String, String>>(
          this,
          Invocation.method(
            #registerUser,
            [user],
          ),
        )),
      ) as _i3.Future<_i4.Either<String, String>>);

  @override
  _i3.Future<_i4.Either<String, String>> loginUser(_i7.Login? login) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [login],
        ),
        returnValue: _i3.Future<_i4.Either<String, String>>.value(
            _i6.dummyValue<_i4.Either<String, String>>(
          this,
          Invocation.method(
            #loginUser,
            [login],
          ),
        )),
      ) as _i3.Future<_i4.Either<String, String>>);
}
